'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserManagement = exports.USER_STATUS = void 0;
const validator_1 = require("../utils/validator");
const api_request_1 = require("../utils/api-request");
const constants_1 = __importDefault(require("../utils/constants"));
const error_1 = require("../utils/error");
const { CREDENTIAL_USER, REQ_METHOD, COMPONENT, REQUEST_TYPE, ADD_USER, REQUEST_DETAILS } = constants_1.default;
var USER_STATUS;
(function (USER_STATUS) {
    USER_STATUS["ENABLE"] = "enable";
    USER_STATUS["DISABLE"] = "disable";
})(USER_STATUS = exports.USER_STATUS || (exports.USER_STATUS = {}));
class UserManagement {
    constructor(app) {
        (0, validator_1.isValidApp)(app, true);
        this.requester = new api_request_1.AuthorizedHttpClient(app, this);
    }
    getComponentName() {
        return COMPONENT.user_management;
    }
    /**
     * Get the current user details
     * @returns Current logged in user
     */
    getCurrentUser() {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                method: REQ_METHOD.get,
                path: `/project-user/current`,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.user
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    getAllUsers(orgId) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                method: REQ_METHOD.get,
                path: `/project-user`,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin,
                qs: orgId ? { org_id: orgId } : undefined
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Get a specific user's details
     * @param id ID of the user to get the details
     * @returns Catalyst user details
     */
    getUserDetails(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyStringOrNumber)(id, 'user_id', true);
            }, error_1.CatalystUserManagementError);
            const request = {
                method: REQ_METHOD.get,
                path: `/project-user/${id}`,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Delete a user
     * @param id ID of the user to be deleted
     * @returns `True` if user is deleted successfully
     */
    deleteUser(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyStringOrNumber)(id, 'user_id', true);
            }, error_1.CatalystUserManagementError);
            const request = {
                method: REQ_METHOD.delete,
                path: `/project-user/${id}`,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            const json = resp.data;
            return json.data ? true : false;
        });
    }
    /**
     * Register a new User
     * @param signupConfig Meta data to register the user
     * @param userDetails Details of the user
     * @returns Catalyst user details
     */
    registerUser(signupConfig, userDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyObject)(signupConfig, 'signupConfig', true);
                (0, validator_1.ObjectHasProperties)(signupConfig, ['platform_type'], 'signupConfig', true);
                (0, validator_1.isNonEmptyObject)(userDetails, 'userDetails', true);
                (0, validator_1.ObjectHasProperties)(userDetails, ['email_id'], 'userDetails', true);
            }, error_1.CatalystUserManagementError);
            signupConfig.user_details = userDetails;
            const request = {
                method: REQ_METHOD.post,
                path: `/project-user`,
                data: signupConfig,
                type: "json" /* JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Get all the org_ids associated with a project
     * @returns List of Org Ids
     */
    getAllOrgs() {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                method: REQ_METHOD.get,
                path: `/project-user/orgs`,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Adds a user to a specific org
     * @param signupConfig Meta data to add the user.
     * @param userDetails Details of the user.
     * @returns Catalyst user details
     */
    addUserToOrg(signupConfig, userDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyObject)(signupConfig, 'signupConfig', true);
                (0, validator_1.ObjectHasProperties)(signupConfig, ['platform_type'], 'signupConfig', true);
                (0, validator_1.isNonEmptyObject)(userDetails, 'userDetails', true);
                (0, validator_1.ObjectHasDeprecatedProperty)(userDetails, 'zaaid', 'org_id', true, true);
                (0, validator_1.ObjectHasProperties)(userDetails, ['email_id', 'org_id'], 'userDetails', true);
            }, error_1.CatalystUserManagementError);
            signupConfig.user_details = userDetails;
            const request = {
                method: REQ_METHOD.post,
                path: `/project-user`,
                data: signupConfig,
                type: "json" /* JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Reset user password
     * @param signupConfig User Meta data
     * @param userDetails User Details
     * @returns
     */
    resetPassword(signupConfig, userDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyObject)(signupConfig, 'signupConfig', true);
                (0, validator_1.ObjectHasProperties)(signupConfig, ['platform_type'], 'signupConfig', true);
                (0, validator_1.isNonEmptyObject)(userDetails, 'userDetails', true);
                (0, validator_1.ObjectHasProperties)(userDetails, ['email_id'], 'userDetails', true);
            }, error_1.CatalystUserManagementError);
            signupConfig.user_details = userDetails;
            const request = {
                method: REQ_METHOD.post,
                path: `/project-user/forgotpassword`,
                data: signupConfig,
                type: "json" /* JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    getSignupValidationRequest(bioReq) {
        if (bioReq.getArgument(REQUEST_TYPE) !== ADD_USER) {
            return;
        }
        const requestDetails = bioReq.getArgument(REQUEST_DETAILS);
        if (typeof requestDetails === 'object') {
            return requestDetails;
        }
        try {
            return JSON.parse(requestDetails);
        }
        catch (_a) {
            throw new error_1.CatalystUserManagementError('Invalid request details', `Unable to parse 'request_details' from basicio args`);
        }
    }
    generateCustomToken(customTokenDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyObject)(customTokenDetails, 'customTokenDetails', true);
            }, error_1.CatalystUserManagementError);
            const request = {
                method: REQ_METHOD.post,
                path: `/authentication/custom-token`,
                data: customTokenDetails,
                type: "json" /* JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Enable or disable the user
     * @param id ID of the user
     * @param userStatus The state to be updated
     * @returns True if the sate is changed
     */
    updateUserStatus(id, userStatus) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyStringOrNumber)(id, 'id', true);
                (0, validator_1.isNonEmptyString)(userStatus, 'userStatus', true);
            }, error_1.CatalystUserManagementError);
            const request = {
                method: REQ_METHOD.post,
                path: `/project-user/${id}/${userStatus}`,
                type: "json" /* JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data ? true : false;
        });
    }
    /**
     * Update user details
     * @param id ID of the user to update
     * @param userDetails Details to be updated.
     * @returns Updated user details
     */
    updateUserDetails(id, userDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyStringOrNumber)(id, 'id', true);
                (0, validator_1.isNonEmptyObject)(userDetails, 'userDetails', true);
                (0, validator_1.ObjectHasDeprecatedProperty)(userDetails, 'zaaid', 'org_id', true, true);
                (0, validator_1.ObjectHasProperties)(userDetails, ['email_id'], 'userDetails', true);
            }, error_1.CatalystUserManagementError);
            const request = {
                method: REQ_METHOD.put,
                path: `/project-user/${id}`,
                data: userDetails,
                type: "json" /* JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
}
exports.UserManagement = UserManagement;
