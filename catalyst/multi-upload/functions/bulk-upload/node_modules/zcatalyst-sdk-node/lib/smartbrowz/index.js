"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Smartbrowz_instances, _Smartbrowz_execute;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Smartbrowz = void 0;
const constants_1 = __importDefault(require("../utils/constants"));
const api_request_1 = require("../utils/api-request");
const validator_1 = require("../utils/validator");
const error_1 = require("../utils/error");
const { REQ_METHOD, CREDENTIAL_USER, PRODUCT_NAME, API_VERSION } = constants_1.default;
class Smartbrowz {
    constructor(app) {
        _Smartbrowz_instances.add(this);
        (0, validator_1.isValidApp)(app, true);
        this.projectId = app.config.projectId;
        this.requester = new api_request_1.AuthorizedHttpClient(app);
    }
    convertToPdf(source, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(source, 'url or html', true);
            }, error_1.CatalystSmartbrowzError);
            const pdfOptions = Object.assign(Object.assign(Object.assign({}, ((0, validator_1.isURL)(source) ? { url: source } : { html: source })), { output_options: {
                    output_type: 'pdf'
                } }), options);
            return yield __classPrivateFieldGet(this, _Smartbrowz_instances, "m", _Smartbrowz_execute).call(this, pdfOptions);
        });
    }
    takeScreenshot(source, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(source, 'url or html', true);
            }, error_1.CatalystSmartbrowzError);
            const ScrOptions = Object.assign(Object.assign(Object.assign({}, ((0, validator_1.isURL)(source) ? { url: source } : { html: source })), { output_options: {
                    output_type: 'screenshot'
                } }), options);
            return yield __classPrivateFieldGet(this, _Smartbrowz_instances, "m", _Smartbrowz_execute).call(this, ScrOptions);
        });
    }
    generateFromTemplate(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyStringOrNumber)(id, 'template id', true);
            }, error_1.CatalystSmartbrowzError);
            const templateOptions = Object.assign({ template_id: id }, options);
            return yield __classPrivateFieldGet(this, _Smartbrowz_instances, "m", _Smartbrowz_execute).call(this, templateOptions);
        });
    }
}
exports.Smartbrowz = Smartbrowz;
_Smartbrowz_instances = new WeakSet(), _Smartbrowz_execute = function _Smartbrowz_execute(details) {
    return __awaiter(this, void 0, void 0, function* () {
        const request = {
            method: REQ_METHOD.post,
            path: `/${PRODUCT_NAME.browser360}/${API_VERSION}/project/${this.projectId}/convert`,
            type: "json" /* JSON */,
            expecting: "raw" /* RAW */,
            data: details,
            catalyst: false,
            track: true,
            user: CREDENTIAL_USER.admin
        };
        const resp = yield this.requester.send(request);
        return resp.data;
    });
};
