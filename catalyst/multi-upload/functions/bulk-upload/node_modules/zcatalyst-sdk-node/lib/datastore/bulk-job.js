'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkWrite = exports.BulkRead = void 0;
const constants_1 = __importDefault(require("../utils/constants"));
const error_1 = require("../utils/error");
const validator_1 = require("../utils/validator");
const { REQ_METHOD, COMPONENT, CREDENTIAL_USER } = constants_1.default;
class BulkJob {
    constructor(tableInstance, operation) {
        this.requester = tableInstance.requester;
        this.identifier = tableInstance.identifier;
        this.operation = operation;
    }
    getComponentName() {
        return COMPONENT.datastore;
    }
    getStatus(jobId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyStringOrNumber)(jobId, 'job_id', true);
            }, error_1.CatalystDatastoreError);
            const request = {
                method: REQ_METHOD.get,
                path: `/bulk/${this.operation}/${jobId}`,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    getResult(jobId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyStringOrNumber)(jobId, 'job_id', true);
            }, error_1.CatalystDatastoreError);
            const request = {
                method: REQ_METHOD.get,
                path: `/bulk/${this.operation}/${jobId}/download`,
                expecting: "raw" /* RAW */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data;
        });
    }
}
class BulkRead extends BulkJob {
    constructor(tableInstance) {
        super(tableInstance, 'read');
    }
    createJob(query, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {
                table_identifier: this.identifier,
                query,
                callback
            };
            const request = {
                method: REQ_METHOD.post,
                path: '/bulk/read',
                type: "json" /* JSON */,
                data,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
}
exports.BulkRead = BulkRead;
class BulkWrite extends BulkJob {
    constructor(tableInstance) {
        super(tableInstance, 'write');
    }
    createJob(fileId, options, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyStringOrNumber)(fileId, 'file_id', true);
            }, error_1.CatalystDatastoreError);
            const data = Object.assign({ table_identifier: this.identifier, file_id: fileId, callback }, options);
            const request = {
                method: REQ_METHOD.post,
                path: '/bulk/write',
                type: "json" /* JSON */,
                data,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
}
exports.BulkWrite = BulkWrite;
