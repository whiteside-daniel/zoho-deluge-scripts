import { CatalystApp } from '../catalyst-app';
import { AuthorizedHttpClient } from '../utils/api-request';
import { ICatalystUser, ICatalystSignupConfig, ICatalystSignupUserConfig, ICatalystSignupValidationReq, Component, ICatalystCustomTokenDetails, ICatalystCustomTokenResponse } from '../utils/pojo/common';
declare type ICatalystNewUser = ICatalystSignupConfig & {
    user_details: ICatalystUser;
};
export declare enum USER_STATUS {
    ENABLE = "enable",
    DISABLE = "disable"
}
export declare class UserManagement implements Component {
    requester: AuthorizedHttpClient;
    constructor(app: CatalystApp);
    getComponentName(): string;
    /**
     * Get the current user details
     * @returns Current logged in user
     */
    getCurrentUser(): Promise<ICatalystUser>;
    /**
     * Get all users in a project
     * @returns List of all users
     */
    getAllUsers(): Promise<Array<ICatalystUser>>;
    /**
     * Get all the users in an org associated with a project
     * @param orgId ID of the org to get the list of associated users.
     * @returns List of all users in an org
     */
    getAllUsers(orgId: string): Promise<Array<ICatalystUser>>;
    /**
     * Get a specific user's details
     * @param id ID of the user to get the details
     * @returns Catalyst user details
     */
    getUserDetails(id: string | number): Promise<ICatalystUser>;
    /**
     * Delete a user
     * @param id ID of the user to be deleted
     * @returns `True` if user is deleted successfully
     */
    deleteUser(id: string | number): Promise<boolean>;
    /**
     * Register a new User
     * @param signupConfig Meta data to register the user
     * @param userDetails Details of the user
     * @returns Catalyst user details
     */
    registerUser(signupConfig: ICatalystSignupConfig, userDetails: Omit<ICatalystSignupUserConfig, 'org_id'> & {
        role_id?: string;
    }): Promise<ICatalystNewUser>;
    /**
     * Get all the org_ids associated with a project
     * @returns List of Org Ids
     */
    getAllOrgs(): Promise<Array<string>>;
    /**
     * Adds a user to a specific org
     * @param signupConfig Meta data to add the user.
     * @param userDetails Details of the user.
     * @returns Catalyst user details
     */
    addUserToOrg(signupConfig: ICatalystSignupConfig, userDetails: ICatalystSignupUserConfig): Promise<ICatalystNewUser>;
    /**
     * Reset user password
     * @param signupConfig User Meta data
     * @param userDetails User Details
     * @returns
     */
    resetPassword(signupConfig: Omit<ICatalystSignupConfig, 'zaid'>, userDetails: Omit<ICatalystSignupUserConfig, 'org_id'>): Promise<string>;
    getSignupValidationRequest(bioReq: {
        getArgument: (arg0: string) => unknown;
    }): ICatalystSignupValidationReq | undefined;
    generateCustomToken(customTokenDetails: ICatalystCustomTokenDetails): Promise<ICatalystCustomTokenResponse>;
    /**
     * Enable or disable the user
     * @param id ID of the user
     * @param userStatus The state to be updated
     * @returns True if the sate is changed
     */
    updateUserStatus(id: string, userStatus: USER_STATUS): Promise<boolean>;
    /**
     * Update user details
     * @param id ID of the user to update
     * @param userDetails Details to be updated.
     * @returns Updated user details
     */
    updateUserDetails(id: string, userDetails: ICatalystSignupUserConfig & {
        role_id: string;
    }): Promise<ICatalystUser>;
}
export {};
